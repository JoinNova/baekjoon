#15965 k번째 소수
'''
l=[]
for i in range(2,10000):
    chk=0
    for j in range(2,i+1):
        if i%j==0:
            chk+=1
    if chk==1:l+=[str(i)]
print(','.join(l))

'''
'''
from sympy import isprime
n=int(input())
i=1;primeCount=0
while True:
    if isprime(i):
        primeCount+=1
    if primeCount==n:
        break
    i+=1
print(i)
'''
'''
def is_prime_bad(n:int)->bool:
    if n<2:
        return False
    for i in range(2,n):
        if n%i is 0:
            return False
    return True
'''
'''
def is_prime_bad_too(n:int)->bool:
    if n<2:
        return False
    if n==2:
        return True
    if n%2 is 0:
        return False
    for i in range(3, n, 2):
        if n%i is 0:
            return False
    return True
'''
'''
def is_prime_not_bad(n:int)->bool:
    if n<2:
        return False
    if n is 2:
        return True
    if n%2 is 0:
        return False
    l=round(n**0.5)+1
    for i in range(3,l,2):
        if n%i is 0:
            return False
    return True
'''
'''
def is_prime(n:int)->bool:
    if n<2:
        return False
    if n in (2,3):
        return True
    if n%2 is 0 or n%3 is 0:
        return False
    if n<9:
        return True
    k,l = 5, n**0.5
    while k <= l:
        if n%k is 0 or n%(k+2) is 0:
            return False
        k+=6
    return True
'''
#소수 리스트 구하는 법
'''
def primes_up_to(n:int)->[int]:
    seive=[False,False]+[True]*(n-1)
    for (i,e) in enumerate(seive):
        if e:
            k=i*2
            while k<=n:
                seive[k] = False
                k+=i
    return [x for (x,y) in enumerate(seive) if y]
'''
'''
def primes_up_to_good(n:int)->[int]:
    seive = [False,False] + [True] * (n-1)
    for k in range(2,n+1):
        if seive[k]:
            seive[k*2::k]=[False]*len(seive[k*2::k])#((n+1-k)//k)
    return [x for x in range(n+1) if seive[x]]
tr=int(input());r=0
#print(primes_up_to_good(tr)[-1])

for i in range(2,9999999999999999):
    #r+=primes_up_to(i)
    if len(primes_up_to_good(i))==tr:print(primes_up_to_good(i)[-1]);break

'''

#from time import time

def eratos(num,find):
    sieve = [False,False]+[True]*num
    count=0
    for i,val in enumerate(sieve):
        if val:
            count+=1
            sieve[i*2::i]=[False]*len(sieve[i*2::i])
            if(count==find):
                print(i)
                break
    #return[i for i,x in enumerate(sieve)if x]
#start_t=time()
li= eratos(7368788,int(input()))
#print(time()-start_t)

'''
#by arki13
table = [True for i in range(10000001)]
table[0], table[1] = False, False

def eratos():
    for i in range(2, 100001):
        if table[i]:
            for j in range(i*2, 10000001, i):
                table[j] = False

cnt = 0
eratos()
n = int(input())
k = 0
while cnt < n:
    k += 1
    if table[k]:
        cnt += 1
print(k)
'''
'''
#by milkclouds
max=8000000
A=[1]*max;pn=[2]
for i in range(3,max+1,2):
	if not A[i]: continue
	pn.append(i)
	for e in range(i*i,max+1,i*2):
		A[e]=0
print(pn[int(input())-1])
'''
'''
#xbfld
from collections import deque
n=int(input())
l1=deque([2,3])
l2=deque([5,7,11])
def p2(n):
	for i in l1:
		if n%i==0:
			return False
	while l2[0]*l2[0]<=n:
		l1.append(l2.popleft())
		if n%l1[-1]==0:
			return False
	l2.append(n)
	return True
k=13
while len(l1)+len(l2)<n:
	p2(k)
	k+=2
if n<=len(l1):print(l1[n-1])
else:print(l2[n-len(l1)-1])
'''
#by sunya7a
'''
import math
K = int(input())

prime = [1]*10000000
count = 0
p1000 = [7919,17389,27449,37813,48611,59359,70657,81799,93179,104729,116447,128189,139901,151703,163841,176081,187963,200183,212369,224737,237203,249439,262139,274529,287117,300023,312583,324949,337541,350377,363269,376127,389171,401987,414977,427991,440723,453889,467213,479909,493127,506131,519227,532333,545747,559081,572311,585493,598687,611953,
625187,638977,652429,665659,679277,692543,706019,719639,732923,746773,760267,773603,787207,800573,814279,827719,841459,855359,868771,882377,896009,909683,923591,937379,951161,965113,978947,993107,1006721,1020379,1034221,1048129,1062511,1076143,1090373,1103923,1117579,1131617,1145689,1159523,1173301,1187003,1200949,1215133,1229269,1243709,1257517,1271293,1285517,1299709,
1313839,1327901,1342051,1356227,1370459,1384631,1398367,1412641,1427039,1441049,1455089,1469393,1483451,1497541,1511539,1525921,1540499,1554881,1569173,1583539,1598011,1612133,1626479,1640833,1655131,1669313,1683673,1698077,1712353,1726943,1741409,1755563,1770437,1784633,1798967,1813351,1827659,1842349,1856297,1870667,1885201,1899481,1913983,1928257,1942747,1957129,1972177,1986757,2000963,2015177,
2029717,2044127,2058871,2073349,2088133,2102717,2117131,2131813,2146231,2160553,2175451,2190031,2204827,2219641,2234129,2248723,2263381,2277553,2292469,2307229,2322143,2336861,2351821,2366297,2381147,2395867,2410621,2425229,2440219,2454587,2469413,2484331,2499023,2513591,2528411,2543221,2558009,2572649,2587007,2601857,2616703,2631529,2646089,2660753,2675909,2690557,2705243,2719631,2735129,2750159,
2764873,2779771,2794723,2809309,2823589,2838169,2853187,2868043,2883371,2898527,2913259,2928151,2943257,2958383,2973059,2987843,3002743,3017689,3032831,3047767,3062989,3077687,3092371,3107633,3122321,3137447,3152341,3167141,3182341,3196933,3211441,3226423,3241201,3256423,3271277,3286331,3301591,3316427,3331423,3346601,3362159,3376991,3391831,3406801,3421751,3436571,3451229,3466829,3482333,3497861,
3512869,3528403,3543791,3558913,3573877,3588941,3604121,3618497,3633347,3648923,3664351,3678931,3694217,3709073,3724223,3738937,3754087,3769763,3784943,3800201,3815209,3830003,3845273,3860347,3875827,3890969,3906319,3921217,3936301,3951161,3967043,3981883,3997859,4012847,4027913,4042729,4057967,4073233,4088237,4103629,4119053,4134629,4149889,4164637,4180097,4195057,4210253,4225457,4241099,4256233,
4271581,4287253,4302631,4317823,4333097,4348691,4364111,4379467,4394783,4410317,4425107,4440041,4455043,4470287,4485479,4500731,4516231,4531811,4547239,4562693,4577927,4593089,4608493,4623793,4639267,4654697,4670207,4685257,4700473,4716053,4731271,4746551,4762099,4777723,4793237,4808369,4823821,4838963,4854623,4869863,4885339,4900099,4915571,4930963,4946231,4961707,4976899,4991843,5007593,5023307,
5038793,5054249,5069663,5084999,5100587,5116141,5131541,5146763,5162387,5178049,5193751,5208887,5224451,5239777,5254859,5270521,5286331,5301481,5316973,5332519,5347789,5363461,5378921,5394401,5410121,5425517,5440889,5456533,5472031,5487701,5503133,5518847,5534677,5550287,5566073,5581397,5596937,5612441,5628257,5644031,5659751,5675381,5690941,5706079,5721481,5737393,5752739,5768663,5784439,5800079,
5815519,5831387,5846957,5862617,5878123,5893357,5908739,5923901,5939371,5955031,5970803,5986613,6002371,6017647,6033101,6049411,6064897,6080443,6096271,6111613,6127403,6142987,6158507,6174017,6190007,6205427,6221543,6237019,6252901,6268289,6283583,6298811,6314699,6329927,6345763,6361657,6377773,6393787,6409297,6424937,6441031,6456509,6472309,6488249,6503507,6519329,6535099,6550741,6566363,6581963,
6597583,6613001,6628711,6644543,6660721,6676331,6692281,6707717,6723113,6738889,6754537,6770161,6786061,6802121,6817619,6833209,6849061,6864191,6879973,6895393,6911323,6927133,6942721,6958207,6973913,6989813,7005697,7021367,7036819,7052113,7068533,7084097,7099739,7115117,7131629,7147397,7163267,7179101,7195079,7210759,7226431,7242359,7258081,7273759,7289449,7305407,7321091,7336919,7353127,7368787, 7500000]

def is_prime(x):
    if x == 1:
        return False
    u = int(math.sqrt(x))
    for i in range(2, u+1):
        if x%i == 0:
            return False
    return True

T = K//1000
P = K%1000
if T == 0:
    start = 2
    count = 1
else:
    start = p1000[T-1]
    count = 1000*T

end = p1000[T]

if count == K:
    print(start)
else:
    for x in range(start+1, end):
        if is_prime(x):
            count += 1
        if count == K:
            print(x)
            break

'''
